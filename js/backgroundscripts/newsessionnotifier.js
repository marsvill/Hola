const PreventDuplicateScript_78=0;let KnownSessions,KnownSessionsUserId,IPFailedSessions={};const GiveSessionChances={},SessionButtonNotifications={},NewSessionButtonNotifications={},UsedNotificationIds={},QueuedNotifications=[];let IsCheckingQueuedNotifications=!1;function GenerateNotificationId(e){let n="";for(;;){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",c=t.length;let s=0;for(;s<e;)n+=t.charAt(Math.floor(Math.random()*c)),s+=1;if(!UsedNotificationIds[n])break;n=""}return n}async function QueueNotifications(e,n,t){if(ManifestVersion==2&&delete n.buttons,chrome.tts||(t=void 0),!(!n&&!t)&&(QueuedNotifications.push({Id:e,Notification:n,TTS:t}),!IsCheckingQueuedNotifications)){for(IsCheckingQueuedNotifications=!0;QueuedNotifications.length>0;){const c=QueuedNotifications.splice(0,1)[0];if(c.Notification&&chrome.notifications?.create&&chrome.notifications.create(c.Id,c.Notification),c.TTS){const s=await IsFeatureEnabled("NewLoginNotifierTTSVolume")||1;chrome.tts.speak(c.TTS,{volume:s})}await sleep(3e3)}IsCheckingQueuedNotifications=!1}}async function GetSavedKnownSessions(e){if(KnownSessions&&KnownSessionsUserId===e)return[!1,!1];KnownSessionsUserId=e;const n=await LocalStorage.get("KnownSessions-"+e);return n?(KnownSessions=JSON.parse(n),[!0,!1]):(KnownSessions={},[!0,!0])}async function SaveKnownSessions(e){LocalStorage.set("KnownSessions-"+e,JSON.stringify(KnownSessions))}async function GetLocationFromSession(e){const n=await IsFeatureEnabled("ShowStateAndCountryOnNewSessionOnly");let t="";return e.location?.city&&!n&&(t=e.location.city),e.location?.subdivision&&(t!=""&&(t+=", "),t+=e.location.subdivision),e.location?.country&&(t!=""&&(t+=", "),t+=e.location.country),t==""&&(t="Unknown Location"),t}function GetBrowserFromSession(e){const n=e.agent,t=n?.type;return n?.value?n?.value:t=="Browser"?"Unknown Browser":t=="App"?"Roblox App":t=="Studio"?"Roblox Studio":t||"Unknown Browser"}async function LogoutSession(e,n,t,c){let s,d,r;if(t?([s,d,r]=await RequestFunc("https://auth.roblox.com/v2/logout","POST",void 0,void 0,!0),!s&&r?.status<500&&(c&&await IsFeatureEnabled("OpenNewTabIfRequiredHAB")||!c&&await IsFeatureEnabled("OpenNewTabIfRequiredJobsHAB"))&&(await chrome.tabs.create({url:"https://www.roblox.com/my/account#!/security",active:!1}),await WaitForRobloxPage(),[s,d,r]=await RequestFunc("https://auth.roblox.com/v2/logout","POST",void 0,void 0,!0))):[s,d,r]=await RequestFunc("https://apis.roblox.com/token-metadata-service/v1/logout","POST",{"Content-Type":"application/json"},JSON.stringify({token:e.token}),!0,!1),!s&&!t&&r?.status==400&&d?.errors?.[0]?.message=="attempting to invalidate current token")return await LogoutSession(e,n,!0);const l=await IsFeatureEnabled("ShowIPOnNewSession"),w=s&&`Logged out of${t&&" current"||""} session`||`Failed to log out of${t&&" current"||""} session`;let u=`${s&&"Logged"||"Failed to log"} out of${t&&" current"||""} session at ${await GetLocationFromSession(e)}
Running ${GetBrowserFromSession(e)} on ${e.agent?.os||"Unknown OS"}`;s||(u+=`
${r?.status||"Unknown"} ${r?.statusText||"Unknown"}`);let f;n&&(await IsFeatureEnabled("OnlyReadNewLoginNotifierTitle")?f=w:f=u.replace(`
`,". ")),QueueNotifications(null,{type:"basic",iconUrl:chrome.runtime.getURL("img/icons/icon128x128.png"),title:w,message:u,contextMessage:l&&`IP: ${e.lastAccessedIp||"Unknown"}`||"IP: HIDDEN (SETTINGS)",eventTime:e.lastAccessedTimestampEpochMilliseconds&&parseInt(e.lastAccessedTimestampEpochMilliseconds)},f)}async function FetchCurrentIP(){const[e,n]=await RequestFunc("https://api.ipify.org/?format=json","GET");return e&&n.ip}async function CheckForNewSessions(){const e=await IsFeatureEnabled("DisallowOtherIPs2"),n=await IsFeatureEnabled("NewLoginNotifier3"),t=await IsFeatureEnabled("StrictlyDisallowOtherIPs2"),c=await IsFeatureEnabled("NewLoginNotifierTTS3");if(!n&&!e&&!t&&!c)return;const s=await GetCurrentUserId();if(!s)return;const[d,r]=await RequestFunc("https://apis.roblox.com/token-metadata-service/v1/sessions?nextCursor=&desiredLimit=500","GET",null,null,!0);if(!d)return;const[l,w]=await GetSavedKnownSessions(s),u=[],f={},m=r.sessions;let h=await FetchCurrentIP();for(let i=0;i<m.length;i++){const o=m[i];if(!KnownSessions[o.token]&&!o.lastAccessedIp&&!GiveSessionChances[o.token]){GiveSessionChances[o.token]={DoNotAlert:l},o.DoNotLogout=!0,u.push(o);continue}else GiveSessionChances[o.token]&&(o.DoNotAlert=GiveSessionChances[o.token].DoNotAlert,delete GiveSessionChances[o.token]);!KnownSessions[o.token]&&!o.isCurrentSession&&u.push(o),f[o.token]=!0}h&&(IPFailedSessions={}),KnownSessions=f,SaveKnownSessions(s);let S;const I=[];if(t&&h)for(let i=0;i<m.length;i++){const o=m[i];if(o.DoNotLogout)continue;h==o.lastAccessedIp||(o.isCurrentSession?S=o:I.push(LogoutSession(o,!0)))}let g=[];if(!w&&u.length>0){const i=await IsFeatureEnabled("IgnoreSessionsFromSameIP"),o=await IsFeatureEnabled("ShowIPOnNewSession");for(let p=0;p<u.length;p++){const a=u[p],k=h&&h==a.lastAccessedIp;if(k&&i)continue;let F=IPFailedSessions[a.token]!=!0;if(!k&&e&&!a.DoNotLogout)if(h){I.push(LogoutSession(a,!0));continue}else delete KnownSessions[a.token],IPFailedSessions[a.token]=!0,SaveKnownSessions();if(!F)continue;if(l){g.push(a);continue}if(a.DoNotAlert)continue;const N=await GetLocationFromSession(a),T=GenerateNotificationId(50),y=[{title:"Logout"}];SessionButtonNotifications[T]={session:a,buttons:y};let b;c&&(await IsFeatureEnabled("OnlyReadNewLoginNotifierTitle")?b=`A new roblox login has been detected at ${N}.`:b=`A new roblox login has been detected at ${N}. Running ${GetBrowserFromSession(a)} on ${a.agent?.os||"Unknown OS"}`),QueueNotifications(T,n&&{type:"basic",buttons:chrome.notifications?.onButtonClicked!=null?y:void 0,iconUrl:chrome.runtime.getURL("img/icons/icon128x128.png"),title:"New Login for Roblox",message:`A new login has been detected at ${N}
Running ${GetBrowserFromSession(a)} on ${a.agent?.os||"Unknown OS"}`,contextMessage:o&&`IP: ${a.lastAccessedIp||"Unknown"}`||"IP: HIDDEN (SETTINGS)",eventTime:a.lastAccessedTimestampEpochMilliseconds&&parseInt(a.lastAccessedTimestampEpochMilliseconds)},b)}}if(S){let i=!1;setTimeout(function(){i||(i=!0,LogoutSession(S,!0))},3*1e3),await Promise.all(I),i||LogoutSession(S,!0),i=!0}if(l&&g.length>0){const i=[{title:"Show"}],o=GenerateNotificationId(50);NewSessionButtonNotifications[o]={sessions:g,buttons:i},QueueNotifications(o,{type:"basic",buttons:chrome.notifications?.onButtonClicked!=null?i:void 0,iconUrl:chrome.runtime.getURL("img/icons/icon128x128.png"),title:`New Login${g.length>1?"s":""} for Roblox`,message:`${g.length} new session${g.length>1?"s":""} have been created while you were gone. Would you like to see them?`})}}chrome.notifications?.onButtonClicked&&chrome.notifications.onButtonClicked.addListener(async function(e,n){const t=NewSessionButtonNotifications[e];if(!t)return;if(t.buttons[n].title==="Show"){const s=t.sessions,d=await IsFeatureEnabled("ShowIPOnNewSession");for(let r=0;r<s.length;r++){const l=s[r],w=await GetLocationFromSession(l),u=GenerateNotificationId(50),f=[{title:"Logout"}];SessionButtonNotifications[u]={session:l,buttons:f},QueueNotifications(u,{type:"basic",buttons:chrome.notifications?.onButtonClicked!=null?f:void 0,iconUrl:chrome.runtime.getURL("img/icons/icon128x128.png"),title:"New Login for Roblox",message:`A new login has been detected at ${w}
Running ${GetBrowserFromSession(l)} on ${l.agent?.os||"Unknown OS"}`,contextMessage:d&&`IP: ${l.lastAccessedIp||"Unknown"}`||"IP: HIDDEN (SETTINGS)",eventTime:l.lastAccessedTimestampEpochMilliseconds&&parseInt(l.lastAccessedTimestampEpochMilliseconds)})}}}),chrome.notifications?.onButtonClicked&&chrome.notifications.onButtonClicked.addListener(async function(e,n){const t=SessionButtonNotifications[e];if(!t)return;t.buttons[n].title==="Logout"&&LogoutSession(t.session,void 0,void 0,!0)}),chrome.notifications?.onClicked&&chrome.notifications.onClicked.addListener(function(e){SessionButtonNotifications[e]&&chrome.tabs.create({url:"https://www.roblox.com/my/account#!/security"})}),chrome.notifications?.onClosed&&chrome.notifications.onClosed.addListener(function(e,n){n&&(delete SessionButtonNotifications[e],delete NewSessionButtonNotifications[e],delete TradeNotifications[e],delete UsedNotificationIds[e],delete GroupShoutNotifications[e])}),CheckForNewSessions(),setInterval(CheckForNewSessions,5*1e3);

//# sourceMappingURL=https://roqol.io/assets/sourcemap/chrome/2.33.1/js/backgroundscripts/newsessionnotifier.js