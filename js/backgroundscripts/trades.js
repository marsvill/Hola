const PreventDuplicateScript_80=0;const AlreadyScannedTrades={},TradeNotifications={};let FirstTradeScans={Inbound:!1,Outbound:!1,Completed:!1,Inactive:!1};async function GetHeadshotBlobFromURL(e){const[a,t]=await RequestFunc(e,"GET",void 0,void 0,!0),n="";if(!a)return n;const[o,i,c]=await RequestFunc(t.data[0].imageUrl,"GET",void 0,void 0,!0,!0);if(!o)return n;const d=await c.blob();return await new Promise(r=>{let s=new FileReader;s.onload=()=>r(s.result),s.readAsDataURL(d)})}async function GetHeadshotBlobFromUserId(e){return GetHeadshotBlobFromURL(`https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds=${e}&size=150x150&format=Png&isCircular=true`)}async function ClearOldScannedTrades(){}async function SaveScannedTrades(e){await IsTradeScanned(e,-1),LocalStorage.set("ScannedTrades_"+e,JSON.stringify(AlreadyScannedTrades[e]))}async function IsTradeScanned(e,a){for(;AlreadyScannedTrades[e]==!0;)await sleep(20);if(!AlreadyScannedTrades[e]){AlreadyScannedTrades[e]=!0;const t=await LocalStorage.get("ScannedTrades_"+e);t?AlreadyScannedTrades[e]=JSON.parse(t):(AlreadyScannedTrades[e]={},FirstTradeScans[e]=!0)}return AlreadyScannedTrades[e][a]}async function HandleAutoDecline(e,a){let[t,n,o]=await DeclineTrade(e.id);if(!t&&o?.status<500&&await IsFeatureEnabled("OpenNewTabIfRequiredJobsHAB")&&(await chrome.tabs.create({url:`https://www.roblox.com/trades?tradeid=${e.id}#${a.toLowerCase()}`,active:!1}),await WaitForRobloxPage(),[t,n,o]=await DeclineTrade(e.id)),!t){const i=GenerateNotificationId(50),c=await GetHeadshotBlobFromUserId(e.user.id),d=[{title:"Open"}];TradeNotifications[i]={type:a,user:e.user,iconUrl:c,tradeid:e.id,buttons:d},chrome.notifications?.create&&chrome.notifications.create(i,{type:"basic",priority:3,iconUrl:c,title:`Failed to decline ${e.user.name} trade`,contextMessage:"This can happen if you do not have a roblox tab open",message:`${n?.errors?.[0]?.message||"Unknown error"}`})}}async function NotifyNewTrades(e,a){if(await IsTradeScanned(a,-1),FirstTradeScans[a]){FirstTradeScans[a]=!1;return}for(let t=0;t<e.length;t++){const n=e[t];let o=[],i="";switch(a){case"Inbound":{i="Inbound Trade",o=[{title:"Open"},{title:"Decline"}];break}case"Outbound":{i="Outbound Trade",o=[{title:"Open"},{title:"Cancel"}];break}case"Completed":{i="Completed Trade",o=[{title:"Open"}];break}case"Inactive":{i="Declined Trade",o=[{title:"Open"}];break}}const[c,d]=await GetTradeInfo(n.id),l=c&&d.offers||[],r={Ours:l[0],Other:l[1]};if(await AddValueToOffers(l),a==="Inbound"){let s=!1;if(await IsFeatureEnabled("AutodeclineTradeValue")){const u=await IsFeatureEnabled("AutodeclineTradeValueThreshold"),f=(r.Other.Value-r.Ours.Value)/r.Ours.Value*100;-u>=f&&(s=!0,HandleAutoDecline(n,a))}!s&&await IsFeatureEnabled("AutodeclineLowTradeValue")&&await IsFeatureEnabled("AutodeclineLowTradeValueThreshold")>r.Other.Value&&(s=!0,HandleAutoDecline(n,a))}if(a==="Outbound"&&await IsFeatureEnabled("AutodeclineOutboundTradeValue")){const s=await IsFeatureEnabled("AutodeclineOutboundTradeValueThreshold"),u=(r.Other.Value-r.Ours.Value)/r.Ours.Value*100;-s>=u&&HandleAutoDecline(n,a)}if(await IsFeatureEnabled("TradeNotifier")&&!await IsFeatureEnabled(`Hide${a}Notifications`)){let s="Unknown";if(r.Ours.Valid&&r.Other.Valid){const h=r.Other.Value-r.Ours.Value;h>0?s=`Gain: +${numberWithCommas(h)}`:h<0?s=`Loss: ${numberWithCommas(h)}`:s="Tie"}const u=GenerateNotificationId(50),f=await GetHeadshotBlobFromUserId(n.user.id);TradeNotifications[u]={type:a,user:n.user,iconUrl:f,tradeid:n.id,buttons:o},chrome.notifications?.create&&chrome.notifications.create(u,{type:"basic",buttons:chrome.notifications?.onButtonClicked!=null?o:void 0,priority:2,eventTime:Date.now(),iconUrl:f,title:i,contextMessage:s,message:`Trader: ${n.user.name}
Your Value: ${r.Ours.Valid&&numberWithCommas(r.Ours.Value)||"???"}
Their Value: ${r.Other.Valid&&numberWithCommas(r.Other.Value)||"???"}`})}}}async function FetchNewTrades(e){if(!UserId)return[];const[a,t]=await RequestFunc(`https://trades.roblox.com/v1/trades/${e}`,"GET",void 0,void 0,!0);if(!a)return[];const n=t.data;let o=!1;for(let i=0;i<n.length;i++){const d=n[i].id;await IsTradeScanned(e,d)?(n.splice(i,1),i--):(AlreadyScannedTrades[e][d]=!0,o=!0)}return o&&SaveScannedTrades(e),n}async function CheckForNewTrades(){const e=["Inbound","Outbound","Completed","Inactive"],a=[];for(let c=0;c<e.length;c++)a.push(FetchNewTrades(e[c]));const[t,n,o,i]=await Promise.all(a);t.length>0&&await NotifyNewTrades(t,"Inbound"),n.length>0&&await NotifyNewTrades(n,"Outbound"),o.length>0&&await NotifyNewTrades(o,"Completed"),i.length>0&&await NotifyNewTrades(i,"Inactive"),ClearOldScannedTrades()}chrome.notifications?.onButtonClicked&&chrome.notifications.onButtonClicked.addListener(function(e,a){const t=TradeNotifications[e];if(!t)return;const n=t.buttons[a];if(n.title==="Open")chrome.tabs.create({url:`https://www.roblox.com/trades?tradeid=${t.tradeid}#${t.type.toLowerCase()}`});else if(n.title==="Decline"||n.title==="Cancel"){async function o(i){const[c,d,l]=await DeclineTrade(t.tradeid);if(!c&&l?.status<500&&i){const r=[{title:"Open"}],s=GenerateNotificationId(50);TradeNotifications[s]={type:t.type,user:t.user,iconUrl:t.iconUrl,tradeid:t.tradeid,buttons:r},chrome.notifications?.create&&chrome.notifications.create(s,{type:"basic",buttons:chrome.notifications?.onButtonClicked!=null?r:void 0,priority:3,iconUrl:t.iconUrl,title:`Failed to decline ${t.user.name} trade`,contextMessage:"This can happen if you do not have a roblox tab open",message:`${Result?.errors?.[0]?.message||"Unknown error"}`})}return c}IsFeatureEnabled("OpenNewTabIfRequiredHAB").then(async function(i){await o(!i)||i&&(await chrome.tabs.create({url:`https://www.roblox.com/trades?tradeid=${t.tradeid}#${t.type.toLowerCase()}`,active:!1}),await WaitForRobloxPage(),o(!0))})}}),chrome.notifications?.onClicked&&chrome.notifications.onClicked.addListener(function(e){const a=TradeNotifications[e];a&&chrome.tabs.create({url:`https://www.roblox.com/trades#${a.type.toLowerCase()}`})}),setInterval(CheckForNewTrades,20*1e3),CheckForNewTrades();

//# sourceMappingURL=https://roqol.io/assets/sourcemap/chrome/2.33.1/js/backgroundscripts/trades.js